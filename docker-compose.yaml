name: 'exchange'

networks:
  exchange-dev:
    driver: bridge

services:
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    depends_on:
    - nginx
    container_name: certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # command: certonly --webroot --webroot-path=/var/www/html --email nikitafantokin@yandex.ru --agree-tos --no-eff-email -d exchangevolute.ru
    entrypoint:  "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
    - exchange-dev 

  nginx:
    image: nginx
    container_name: nginx
    ports:
    - "80:80"
    - 443:443
    restart: always
    networks: 
    -  exchange-dev
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
        - frontend

  postgres_db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_NAME: 'postgres'
      POSTGRES_PASSWORD: '123'
      POSTGRES_DB: 'rate_db'
    ports:
      - "5433:5432"
    networks:
      - exchange-dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
  
  rabbitmq:
    container_name: rabbit
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "5673:5673"
      - "15672:15672" 
    networks:
      - exchange-dev
    volumes:      
      - ./rabbitmq:/var/lib/rabbitmq

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server","--appendonly","yes"]
    networks:
      - exchange-dev
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    volumes:
      - redis-data:/var/lib/redis/data

  valute_service:
    image: ${DOCKER_REGISTRY-}exchange-valute
    container_name: exchange-valute
    build:
        context: .
        dockerfile: ./Systems/Api/Exchange.ExchangeValue/Dockerfile
    networks:
        - exchange-dev
    ports:
       - "8010:8080"
    depends_on:
       - postgres_db
  
  cache_service:
    image: ${DOCKER_REGISTRY-}exchange-cache
    container_name: exchange-cache
    build:
        context: .
        dockerfile: ./Systems/Api/Exchange.ExchangeCache/Dockerfile
    networks:
        - exchange-dev
    ports:
        - "8020:8080"
    depends_on:
       - redis

  auth_service:
    image: ${DOCKER_REGISTRY-}exchange-auth
    container_name: exchange-auth
    build:
        context: .
        dockerfile: ./Systems/Api/Exchange.ExchangeAccount/Dockerfile
    networks:
        - exchange-dev
    ports:
       - "8030:8080"
    depends_on:
       - postgres_db

  rabbit_worker:
    image: ${DOCKER_REGISTRY-}rabbit-worker
    container_name: rabbit-worker
    build:
        context: .
        dockerfile: ./Systems/Worker/Exchange.Worker/Dockerfile
    networks:
        - exchange-dev
    ports:
       - "8070:8080"
    depends_on:
      - auth_service
      - rabbitmq
    restart: "always"  
  
  volute_worker:
    image: ${DOCKER_REGISTRY-}volute-worker
    container_name: volute-worker
    build:
        context: .
        dockerfile: ./Systems/Worker/Exchange.WorkerDaily/Dockerfile
    networks:
        - exchange-dev
    ports:
       - "8060:8080"
    depends_on:
      - auth_service
      - cache_service
      - rabbitmq
    restart: "always"

  frontend:
    image: ${DOCKER_REGISTRY-}frontend
    container_name: frontend
    build:
      context: ./Systems/Web/exchange-rates/
      dockerfile: Dockerfile
    networks:
      - exchange-dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production

volumes:
  postgres-data:
  redis-data:
  www-html:
    driver: local
  etc-letsencrypt: